#include <stdio.h>
#include <stdlib.h>


int main() {
	float f1[] = {0, 0, 0, 0}; //We are going to store the constants of unknowns in arrays in a form of floats.
	float f2[] = {0, 0, 0, 0};
	float f3[] = {0, 0, 0, 0};
	float x, y, z;
	float k1, k2;  //these are the constants of the equation with two unknown since we are using eliminating variables method
	float l1, l2;
	float m1, m2;  //results of the equations with two unknown variable
	float result1, result2, result3;
	float check = 0;
	FILE *tr;   
	tr = fopen("C:\\Users\\batuh\\OneDrive\\Masaüstü\\21-22 Spring\\EEE206-S01-2021.2 Programming\\Project 3\\equations.txt", "r");  //Opening a file
	fseek(tr, 0, SEEK_SET);   //Setting the cursor at the beginning of the file
	for(int i=0; i<3; i++){   //for loop is for the reading three constants of one equation
		fscanf(tr, "%f", &f1[i]);
		fseek(tr, 1, SEEK_CUR);  //moving the cursor to the next constant of the variable
	}
	fseek(tr, 1, SEEK_CUR);
	fscanf(tr, "%f", &f1[3]);  //reading the result of the equation
	fseek(tr, 1, SEEK_CUR);    //moving to the next line, same process goes for every equation
	for(int j=0; j<3; j++){
		fscanf(tr, "%f", &f2[j]);
		fseek(tr, 1, SEEK_CUR);
	}
	fseek(tr, 1, SEEK_CUR);
	fscanf(tr, "%f", &f2[3]);
	fseek(tr, 1, SEEK_CUR);
	for(int h=0; h<3; h++){
		fscanf(tr, "%f", &f3[h]);
		fseek(tr, 1, SEEK_CUR);
	}
	fseek(tr, 1, SEEK_CUR);
	fscanf(tr, "%f", &f3[3]);
	fclose(tr);  //closing the file
	//printing the constants to be able to check it whether they are read correctly
	printf("The constants of the equations: \n");
	printf("The constant of x1: %f " "The constant of y1: %f " "The constant of z1: %f " "The result of the first equation: %f \n", f1[0], f1[1], f1[2], f1[3]); 
	printf("The constant of x2: %f " "The constant of y2: %f " "The constant of z2: %f " "The result of the second equation: %f \n", f2[0], f2[1], f2[2], f2[3]);
	printf("The constant of x3: %f " "The constant of y3: %f " "The constant of z3: %f " "The result of the third equation: %f \n", f3[0], f3[1], f3[2], f3[3]);
	
	if(((f1[0] == f2[0] && f1[1] == f2[1] && f1[2] == f2[2])||(f1[0] == f3[0] && f1[1] == f3[1] && f1[2] == f3[2])|| (f2[0] == f3[0] && f2[1] == f3[1] && f2[2] == f3[2]))||(f1[0]==f2[0]==f3[0] && f1[1]==f2[1]==f3[1] && f1[2]==f2[2]==f3[2]) ){
		return(printf("All equations must be different from each other.")); //the error of two same equation 
	} 
	if(f1[2]*1 == check && f2[2]*1 == check && f3[0]*1 == check && f3[1]*1 == check && f3[2]*1 == check){ //checking if the system has 2 unknowns
		y = ((f1[3]*f2[0]) - (f2[3]*f1[0]))/((f1[1]*f2[0])-(f2[1]*f1[0])); //finding y
		x = (f1[3]-(f1[1]*y))/f1[0];			  //finding x
		printf("x is equal to = %f \n", x);       //printing the value of x   
		printf("y is equal to = %f \n", y);       //printing the value of y 
		result1 = ((x*f1[0])+y*f1[1]);			  //plugging the variables into the first equation for verification
		result2 = ((x*f2[0])+y*f2[1]);			  //plugging the variables into the second equation for verification
		printf("Simulating for the first equation, compare it with the result of the first equation: %f \n", result1);
		printf("Simulating for the second equation, compare it with the result of the second equation: %f \n", result2);
		return 0;	
	}
	else{
		k1 = ((f1[1]*f2[0])-(f2[1]*f1[0])); //constant of y in the first equation with two unknown variable
		l1 = ((f1[2]*f2[0])-(f2[2]*f1[0])); //constant of z in the first equation with two unknown variable
		m1 = ((f1[3]*f2[0])-(f2[3]*f1[0])); //result of the first equation with two unknown variable
		k2 = ((f1[1]*f3[0])-(f3[1]*f1[0])); //constant of y in the second equation with two unknown variable
		l2 = ((f1[2]*f3[0])-(f3[2]*f1[0])); //constant of z in the second equation with two unknown variable
		m2 = ((f1[3]*f3[0])-(f3[3]*f1[0])); //result of the second equation with two unknown variable
		z = (((m1*k2)-(m2*k1))/((l1*k2)-(l2*k1)));  //calculating the value of z
		y = ((m1-(l1*z))/k1);                       //calculating the value of y
		x = ((f1[3]-(f1[2]*z)-(f1[1]*y))/f1[0]);    //calculating the value of x
		printf("x is equal to = %f \n", x);       //printing the value of x   
		printf("y is equal to = %f \n", y);       //printing the value of y 
		printf("z is equal to = %f \n", z);       //printing the value of x 
		result1 = ((x*f1[0])+(y*f1[1])+(z*f1[2])); //plugging the variables into the first equation for verification
		result2 = ((x*f2[0])+(y*f2[1])+(z*f2[2])); //plugging the variables into the second equation for verification
		result3 = ((x*f3[0])+(y*f3[1])+(z*f3[2])); //plugging the variables into the third equation for verification
		printf("Simulating for the first equation, compare it with the result of the first equation: %f \n", result1);
		printf("Simulating for the second equation, compare it with the result of the second equation: %f \n", result2);
		printf("Simulating for the third equation, compare it with the result of the third equation: %f \n", result3);
		return 0;		
	}
	
}
